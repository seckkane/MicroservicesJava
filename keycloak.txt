About KEYCLOAK
Keycloak permet √† tes applications de ne plus g√©rer elles-m√™mes les utilisateurs, les mots de passe et les r√¥les, mais de d√©l√©guer tout √ßa √† un serveur central.
| Fonctionnalit√©                                  | Description                                                                         |
| ----------------------------------------------- | ----------------------------------------------------------------------------------- |
| **Single Sign-On (SSO)**                        | Un utilisateur se connecte une seule fois et acc√®de √† toutes les applis autoris√©es. |
| **OpenID Connect / OAuth2 / SAML 2.0**          | Protocoles standards pour la gestion des tokens et sessions.                        |
| **Gestion des utilisateurs**                    | Cr√©ation, suppression, r√¥les, groupes, etc.                                         |
| **Int√©gration LDAP / Active Directory**         | Connexion √† des r√©pertoires externes d‚Äôutilisateurs.                                |
| **Authentification √† plusieurs facteurs (MFA)** | S√©curit√© renforc√©e via OTP, SMS, ou applis d‚Äôauthentification.                      |
| **Clients et r√¥les**                            | G√®re les applications (clients) et leurs permissions.                               |
| **Admin Console & Account Console**             | Deux interfaces web : une pour les admins, une pour les utilisateurs.               |

Les differents concepts
| Concept                     | R√¥le                                                                                  |
| --------------------------- | ------------------------------------------------------------------------------------- |
| **Realm**                   | Un espace d‚Äôauthentification ind√©pendant (par ex. ‚Äúmy-company‚Äù).                      |
| **Client**                  | Une application qui demande une authentification √† Keycloak (ex : `gateway-service`). |
| **User**                    | Un compte utilisateur g√©r√© par Keycloak.                                              |
| **Role**                    | Une permission ou profil (ex : `admin`, `user`).                                      |
| **Token**                   | Jeton JWT envoy√© aux applis apr√®s authentification.                                   |
| **Identity Provider (IdP)** | Fournisseur d‚Äôidentit√© externe (Google, Facebook, etc.).                              |

Les types de clients
| Client           | Type           | Description                                                                        | Exemple                                             |
| ---------------- | -------------- | ---------------------------------------------------------------------------------- | --------------------------------------------------- |
| **Angular App**  | `public`       | Front-end, ne peut pas stocker de secret                                           | Utilisateur se connecte ici avec login/mot de passe |
| **API Gateway**  | `confidential` | Peut stocker un *client secret*                                                    | V√©rifie les tokens JWT envoy√©s par le front         |
| **Microservice** | `bearer-only`  | Ne fait pas de login, mais **accepte seulement** les requ√™tes avec un token valide | Exemple : `product-service`, `order-service`        |

Les utilisateurs = ‚Äúpersonnes‚Äù de ton syst√®me
Oui ‚Äî quand on parle de users, on parle :
des comptes du personnel (admins, employ√©s),
des utilisateurs finaux de ton application,
parfois m√™me des applications elles-m√™mes (via service accounts).
Ils ne correspondent pas √† des comptes de base de donn√©es,
mais √† des identit√©s au niveau m√©tier (personnes, syst√®mes, services).

Les PROTOCOLES : OpenID Connect, OAuth2, SAML
| Protocole                 | Sert √†                                                                           | Utilisation                             |
| ------------------------- | -------------------------------------------------------------------------------- | --------------------------------------- |
| **OAuth 2.0**             | Autoriser une app √† acc√©der √† une ressource au nom d‚Äôun utilisateur              | Base du ‚ÄúBearer Token‚Äù                  |
| **OpenID Connect (OIDC)** | Extension de OAuth2 pour l‚Äô**authentification** (savoir *qui est l‚Äôutilisateur*) | Utilis√© entre Angular et Keycloak       |
| **SAML 2.0**              | Ancien protocole XML pour SSO (souvent entreprises)                              | Encore utilis√© dans les syst√®mes legacy |

Recap Login -> to access API
| √âtape | Composant    | Action                                               |
| ----- | ------------ | ---------------------------------------------------- |
| 1     | Angular      | Redirige vers Keycloak pour login                    |
| 2     | Keycloak     | Authentifie Moussa (v√©rifie login + mot de passe)    |
| 3     | Keycloak     | G√©n√®re un Access Token (JWT)                         |
| 4     | Angular      | Stocke temporairement le token                       |
| 5     | Gateway      | Re√ßoit le token ‚Üí le valide                          |
| 6     | Microservice | Re√ßoit la requ√™te ‚Üí valide aussi le token            |
| 7     | R√©ponse      | Le service r√©pond si le token est valide et autoris√© |


Exemple de configuration Keycloak
Client 1 : Angular App (public)
| Param√®tre                  | Valeur                           |
| -------------------------- | -------------------------------- |
| **Client ID**              | `angular-app`                    |
| **Access Type**            | `public`                         |
| **Root URL**               | `http://localhost:4200/`         |
| **Redirect URIs**          | `http://localhost:4200/*`        |
| **Web Origins**            | `*` (ou `http://localhost:4200`) |
| **Valid Post Logout URIs** | `http://localhost:4200/`         |
Angular se connecte directement √† Keycloak, sans secret.

Client 2 : API Gateway (confidential)
| Param√®tre                | Valeur                                   |
| ------------------------ | ---------------------------------------- |
| **Client ID**            | `gateway-service`                        |
| **Access Type**          | `confidential`                           |
| **Root URL**             | `http://localhost:8080/`                 |
| **Credentials ‚Üí Secret** | `xxxxx-secret-key` (g√©n√©r√© par Keycloak) |

Les types d'utilisateur 
Utilisateur humain (standard user)
Un utilisateur r√©el : client, employ√©, membre d‚Äôune organisation‚Ä¶
Exemples :
moussa.diop ‚Üí utilisateur normal de ton application.
admin.app ‚Üí administrateur m√©tier.
client.entreprise ‚Üí compte client B2B.
‚úÖ Ces comptes peuvent :
se connecter via la page de login,
recevoir un token,
avoir des r√¥les (ROLE_USER, ROLE_ADMIN, etc.).

Service Account (utilisateur machine)
Repr√©sente une application backend (ou script) qui s‚Äôauthentifie sans interface utilisateur.
Chaque client confidentiel peut avoir son propre service account activ√©.
Exemple :
Le client gateway-service peut avoir :
Service account user: service-account-gateway-service
Ce compte peut :
appeler d‚Äôautres APIs internes,
obtenir un token via client credentials flow,
avoir des r√¥les techniques (ROLE_SYSTEM, ROLE_INTEGRATION‚Ä¶).

Utilisateur f√©d√©r√©
Utilisateur qui vient d‚Äôune source externe (LDAP, Google, Azure AD‚Ä¶).
Exemple :
moussa.diop@entreprise.com connect√© via Active Directory.
user@gmail.com connect√© via Google OAuth.
‚û°Ô∏è Keycloak n‚Äôa pas le mot de passe localement,
il d√©l√®gue la v√©rification √† la source externe.

Administrateur Keycloak
Utilisateur ayant acc√®s √† la console d‚Äôadministration de Keycloak.
Peut cr√©er des realms, des clients, des r√¥les, etc.
Peut aussi √™tre un utilisateur dans un realm sp√©cial : master.

Recap
| √âl√©ment                        | Angular (public)            | Gateway (confidential) | Microservice (bearer-only)      |
| ------------------------------ | --------------------------- | ---------------------- | ------------------------------- |
| **Enregistr√© dans Keycloak ?** | ‚úÖ Oui                       | ‚úÖ Oui                  | ‚úÖ Oui                           |
| **Stocke un secret ?**         | ‚ùå Non                       | ‚úÖ Oui                  | ‚ùå Non                           |
| **Fait un login ?**            | ‚úÖ Oui (via OIDC)            | ‚ùå Non                  | ‚ùå Non                           |
| **V√©rifie le token ?**         | ‚ùå Non                       | ‚úÖ Oui                  | ‚úÖ Oui                           |
| **Repr√©sente ?**               | Frontend                    | API s√©curis√©e          | Service interne                 |
| **Utilisateur associ√© ?**      | User r√©el (ex: moussa.diop) | Service Account        | Aucun (re√ßoit token du Gateway) |

Gateway (client confidentiel) demande un token :
POST /realms/{realm}/protocol/openid-connect/token
grant_type=client_credentials
client_id=gateway-service
client_secret=xxxxx

Remarque : OAuth2 ne dit pas qui est l‚Äôutilisateur (c‚Äôest pour l‚Äôautorisation). Pour l‚Äôauthentification, on ajoute OIDC.

Endpoints utiles Keycloak (OIDC)
Authorization: /realms/{realm}/protocol/openid-connect/auth
Token: /realms/{realm}/protocol/openid-connect/token
Introspection: /realms/{realm}/protocol/openid-connect/token/introspect
UserInfo: /realms/{realm}/protocol/openid-connect/userinfo
JWKS (certs): /realms/{realm}/protocol/openid-connect/certs

Qui d√©finit les applications qui participent au SSO ?
C‚Äôest le realm dans Keycloak qui d√©finit toutes les applications clientes qui participent √† l‚Äô√©cosyst√®me de confiance (realm = domaine d‚Äôidentit√© commun).
üëâ Qu‚Äôest-ce qu‚Äôun realm concr√®tement :

C‚Äôest une ‚Äúfronti√®re de s√©curit√©‚Äù dans Keycloak.
Tout ce qui est √† l‚Äôint√©rieur partage :
la m√™me base d‚Äôutilisateurs,
les m√™mes r√¥les et policies,
les m√™mes cl√©s de signature JWT,
et surtout la m√™me session SSO.
üß† Donc ‚Üí le SSO ne marche qu‚Äô√† l‚Äôint√©rieur d‚Äôun m√™me realm.
Si tu as plusieurs realms, chacun a ses propres sessions et cookies de login.

Exemple concret

Imaginons un realm : mycompany.
Il contient plusieurs clients enregistr√©s :
| Nom du client     | Type                        | Description           | SSO partag√© ? |
| ----------------- | --------------------------- | --------------------- | ------------- |
| `angular-app`     | Public (OIDC)               | ton front web Angular | ‚úÖ Oui         |
| `gateway-service` | Confidential (OIDC)         | ton API gateway       | ‚úÖ Oui         |
| `product-service` | Bearer-only (OIDC)          | microservice produit  | ‚úÖ Oui         |
| `admin-portal`    | Confidential (SAML ou OIDC) | app back-office       | ‚úÖ Oui         |

Ces quatre ‚Äúclients‚Äù appartiennent au m√™me realm mycompany, donc :
si l‚Äôutilisateur se connecte sur angular-app, il obtient une session Keycloak valable aussi pour admin-portal (s‚Äôil va sur son URL, il sera directement reconnu).
üí° SSO = cookies de session Keycloak + realm commun + clients enregistr√©s.

Recap Fin 
| √âl√©ment           | D√©finition / r√¥le                                                  | Exemple                                      |
| ----------------- | ------------------------------------------------------------------ | -------------------------------------------- |
| **Realm**         | Domaine d‚Äôidentit√©, base de confiance commune                      | `mycompany`                                  |
| **Client**        | Application qui utilise Keycloak (public/confidential/bearer-only) | Angular, Gateway, microservice               |
| **SSO**           | Session partag√©e Keycloak dans un realm                            | login unique pour Angular + Admin Portal     |
| **Secret client** | Mot de passe pour authentifier un client confidentiel              | Gateway stocke son secret dans vault/env var |
| **Bearer-only**   | Client qui ne fait que valider tokens                              | microservice produit                         |
| **Public**        | Client sans secret (navigateur/mobile)                             | Angular app                                  |


Exemple 
 
POST http://localhost:8083/realms/spring-microservices-securityshop-realm/protocol/openid-connect/token
Network
addresses: {‚Ä¶}
local: {‚Ä¶}
remote: {‚Ä¶}
Request Headers
Content-Type: application/x-www-form-urlencoded
User-Agent: PostmanRuntime/7.49.0
Accept: */*
Cache-Control: no-cache
Postman-Token: 418ff08c-7845-49f9-9a6f-ca4269424443
Host: localhost:8083
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Content-Length: 115
Cookie: JSESSIONID=470B90ABB2F36D19EB1F42B00CAAA608
Request Body
grant_type: "client_credentials"
client_id: "spring-client-credentials-id"
client_secret: "KLHaJPSij3uf6UVn66cH3MlSPmxRJPNY"
Response Headers
Cache-Control: no-store
Pragma: no-cache
content-length: 1562
Content-Type: application/json
Referrer-Policy: no-referrer
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Response Body
{"access_token":"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMdURNSTNYSFNCaE9yT2VEZXpiT3dVS21DMTZCVHFBYW1ocENIZWk3NXN3In0.eyJleHAiOjE3NjE5MjQ4MjYsImlhdCI6MTc2MTkyNDUyNiwianRpIjoiNTJjNTNmYTEtOTVmOC00NTQwLTk3NjQtMDM3NDE3ZjE0OGQ4IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgzL3JlYWxtcy9zcHJpbmctbWljcm9zZXJ2aWNlcy1zZWN1cml0eXNob3AtcmVhbG0iLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiNDM3MzBmZjgtYWYwOC00OGIzLTgxNTYtYTBhMDU2ZTNhY2VlIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic3ByaW5nLWNsaWVudC1jcmVkZW50aWFscy1pZCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiLyoiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImRlZmF1bHQtcm9sZXMtc3ByaW5nLW1pY3Jvc2VydmljZXMtc2VjdXJpdHlzaG9wLXJlYWxtIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiY2xpZW50SG9zdCI6IjE3Mi4yMi4wLjEiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJzZXJ2aWNlLWFjY291bnQtc3ByaW5nLWNsaWVudC1jcmVkZW50aWFscy1pZCIsImNsaWVudEFkZHJlc3MiOiIxNzIuMjIuMC4xIiwiY2xpZW50X2lkIjoic3ByaW5nLWNsaWVudC1jcmVkZW50aWFscy1pZCJ9.vQG3OSSopG3JudzvD_-YD1p1z4Mx0QRjBe435I2AazT7_Note-TQn2TMT-7J3mMgZaP6Qs4kg3R5C0I-ZCDPEt5_vvW5xxMMuc5o3dOPMugP0nvlH613htztVox-AXbu3jMsliNRYFbDhr9XyfJoTR5QzLG9K5QF6f2ykXYGhahCVrzfnN0WaSwgROnFzOpDhUoQTgRhzln812oyXetqiuq4FlwzpWUMveZG3dMpKGjRFgFo3FdcdAqbh0JSoHAWxy-oa6pFDcQ9gS_IryzSil7dhFZ-nPIGeYNdW_H6CJURZFb-RACQalu24jQGk3ju1ZTaNo795RUesHI9Yn6t1g","expires_in":299,"refresh_expires_in":0,"token_type":"Bearer","not-before-policy":0,"scope":"email profile"}
 
GET http://localhost:8090/api/product
200
549 ms
Network
Request Headers
Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMdURNSTNYSFNCaE9yT2VEZXpiT3dVS21DMTZCVHFBYW1ocENIZWk3NXN3In0.eyJleHAiOjE3NjE5MjQ4MjYsImlhdCI6MTc2MTkyNDUyNiwianRpIjoiNTJjNTNmYTEtOTVmOC00NTQwLTk3NjQtMDM3NDE3ZjE0OGQ4IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgzL3JlYWxtcy9zcHJpbmctbWljcm9zZXJ2aWNlcy1zZWN1cml0eXNob3AtcmVhbG0iLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiNDM3MzBmZjgtYWYwOC00OGIzLTgxNTYtYTBhMDU2ZTNhY2VlIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic3ByaW5nLWNsaWVudC1jcmVkZW50aWFscy1pZCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiLyoiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImRlZmF1bHQtcm9sZXMtc3ByaW5nLW1pY3Jvc2VydmljZXMtc2VjdXJpdHlzaG9wLXJlYWxtIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiY2xpZW50SG9zdCI6IjE3Mi4yMi4wLjEiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJzZXJ2aWNlLWFjY291bnQtc3ByaW5nLWNsaWVudC1jcmVkZW50aWFscy1pZCIsImNsaWVudEFkZHJlc3MiOiIxNzIuMjIuMC4xIiwiY2xpZW50X2lkIjoic3ByaW5nLWNsaWVudC1jcmVkZW50aWFscy1pZCJ9.vQG3OSSopG3JudzvD_-YD1p1z4Mx0QRjBe435I2AazT7_Note-TQn2TMT-7J3mMgZaP6Qs4kg3R5C0I-ZCDPEt5_vvW5xxMMuc5o3dOPMugP0nvlH613htztVox-AXbu3jMsliNRYFbDhr9XyfJoTR5QzLG9K5QF6f2ykXYGhahCVrzfnN0WaSwgROnFzOpDhUoQTgRhzln812oyXetqiuq4FlwzpWUMveZG3dMpKGjRFgFo3FdcdAqbh0JSoHAWxy-oa6pFDcQ9gS_IryzSil7dhFZ-nPIGeYNdW_H6CJURZFb-RACQalu24jQGk3ju1ZTaNo795RUesHI9Yn6t1g
User-Agent: PostmanRuntime/7.49.0
Accept: */*
Postman-Token: 6037fd1d-a3f2-4fe3-ba0b-5b0255b1a079
Host: localhost:8090
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Cookie: JSESSIONID=470B90ABB2F36D19EB1F42B00CAAA608
Response Headers
date: Fri, 31 Oct 2025 15:28:59 GMT
X-Content-Type-Options: nosniff
X-XSS-Protection: 0
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Pragma: no-cache
Expires: 0
X-Frame-Options: DENY
Content-Type: application/json
Transfer-Encoding: chunked
Keep-Alive: timeout=60
Connection: keep-alive
Response Body
[{"id":"68daa7afa11850cd1c41bc57","name":"Laptop Gamer","description":"Ordinateur portable puissant pour gaming","skuCode":"SKU-LAP123","price":1500.00},{"id":"68daa80aa11850cd1c41bc58","name":"Smartphone Ultra","description":"Smartphone Android haut de gamme avec √©cran AMOLED","skuCode":"SKU-PHN456","price":900.00},{"id":"68daa815a11850cd1c41bc59","name":"Casque Audio","description":"Casque Bluetooth avec r√©duction de bruit active","skuCode":"SKU-HDP789","price":200.00},{"id":"68dbe9eca11850cd1c41bc5a","name":"Casque Ordi","description":"Casque Bluetooth avec r√©duction de bruit active","skuCode":"SKU-HDP789","price":200.00},{"id":"68dd3e22b370ff6daa14f4e1","name":"Smartphone Ultra","description":"Smartphone Iphone haut de gamme avec √©cran AMOLED","skuCode":"SKU-PHN459","price":900.00},{"id":"68f631970d63a85a7cf20ca6","name":"HP Elite one","description":"All in One Computer with performants CPU","skuCode":"SKU-HPE459","price":1200.00},{"id":"68ff5320ac38364aca18b2fc","name":"HP Elite book","description":"All in One Computer with performants CPU","skuCode":"SKU-HPE555","price":1400.00}]


Requ√™te POST pour obtenir le token
URL : POST http://localhost:8083/realms/spring-microservices-securityshop-realm/protocol/openid-connect/token

Headers importants
Content-Type: application/x-www-form-urlencoded ‚Üí Keycloak attend les param√®tres sous forme grant_type=...&client_id=...&client_secret=....
Authorization n‚Äôest pas pr√©sent ici, car tu utilises client_credentials (client secret dans le body).
Postman-Token et Cookie ‚Üí internes √† Postman et la session HTTP, pas critiques pour le token.

Body
grant_type=client_credentials
client_id=spring-client-credentials-id
client_secret=KLHaJPSij3uf6UVn66cH3MlSPmxRJPNY

grant_type=client_credentials ‚Üí tu demandes un token pour le client, pas pour un utilisateur particulier.
client_id et client_secret ‚Üí identifient le client dans Keycloak.
Pas besoin d‚Äôutilisateur/mot de passe avec client_credentials.

Reponse 
{
  "access_token":"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUI...",
  "expires_in":299,
  "refresh_expires_in":0,
  "token_type":"Bearer",
  "scope":"email profile"
}

access_token ‚Üí le JWT que tu vas utiliser pour acc√©der √† ton microservice.
expires_in ‚Üí dur√©e de validit√© du token en secondes (~5 min ici).
token_type ‚Üí toujours ‚ÄúBearer‚Äù pour OAuth2.
scope ‚Üí les permissions demand√©es par le client (ici email profile).

Point cl√© : m√™me sans MySQL, Keycloak g√©n√®re un token valide car tout est en m√©moire (dev-file).

Requ√™te GET vers ton microservice
URL : GET http://localhost:8090/api/product

Headers
Authorization: Bearer <token> ‚Üí ici, tu passes le JWT r√©cup√©r√© pr√©c√©demment.
Accept: */*, User-Agent ‚Üí info classique HTTP.

R√©ponse
[
  {"id":"68daa7afa11850cd1c41bc57","name":"Laptop Gamer","price":1500.00,...},
  {"id":"68daa80aa11850cd1c41bc58","name":"Smartphone Ultra","price":900.00,...},
  ...
]

Ton microservice Spring Boot a accept√© le token JWT.
Spring Security (ou le filtre JWT) a valid√© :
Le token est bien form√©,
Il provient du bon issuer (ton Keycloak),
Il n‚Äôest pas expir√©.
R√©sultat : 200 OK avec la liste des produits.

 
POST http://localhost:8083/realms/spring-microservices-securityshop-realm/protocol/openid-connect/token
200
29 ms
Network
Request Headers
Request Body
Response Headers
Response Body
 
GET http://localhost:8090/api/product
Network
Request Headers
Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMdURNSTNYSFNCaE9yT2VEZXpiT3dVS21DMTZCVHFBYW1ocENIZWk3NXN3In0.eyJleHAiOjE3NjE5MjYxOTEsImlhdCI6MTc2MTkyNTg5MSwianRpIjoiNDU3MGY0MGQtMzA4OS00YzY3LTkyYzctMjQ1OTJkNDIxNDIxIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgzL3JlYWxtcy9zcHJpbmctbWljcm9zZXJ2aWNlcy1zZWN1cml0eXNob3AtcmVhbG0iLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiNDM3MzBmZjgtYWYwOC00OGIzLTgxNTYtYTBhMDU2ZTNhY2VlIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic3ByaW5nLWNsaWVudC1jcmVkZW50aWFscy1pZCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiLyoiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImRlZmF1bHQtcm9sZXMtc3ByaW5nLW1pY3Jvc2VydmljZXMtc2VjdXJpdHlzaG9wLXJlYWxtIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiY2xpZW50SG9zdCI6IjE3Mi4yMi4wLjEiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJzZXJ2aWNlLWFjY291bnQtc3ByaW5nLWNsaWVudC1jcmVkZW50aWFscy1pZCIsImNsaWVudEFkZHJlc3MiOiIxNzIuMjIuMC4xIiwiY2xpZW50X2lkIjoic3ByaW5nLWNsaWVudC1jcmVkZW50aWFscy1pZCJ9.mCu6eeU6GAn1XJ2igrwd_L1ocYsKuFnp5V9Qxn79TuKARtwAht8pRiS9FtNiK11t0SxL6ffYLFurTsc3XkNzZu_-o9T6QZuC5DOWOyGP7zCEzLppOfJ3nbdOoD8YfJLAZBJzXSOA-ZT2HY7rec_xhLNliKnZgIzRw_oThdMZuDslL5naiddUpoJpzLihaIPLT0kzZJsjS37FhI5wjFew7lvinHA6hGotVBt-LTlF93cNObDP4i0KvRm3KZAte_lmv7ZCxvba75gv1rozRKbjJKsEoe8M-g9mj1JeYnoGa9IqwZ7tclM-uXBc5oY6xw1ZW4_Z9pj6VDky5JHfpYnKHw
User-Agent: PostmanRuntime/7.49.0
Accept: */*
Postman-Token: b8cb2455-17b5-44d8-a6f7-3ac07db719bb
Host: localhost:8090
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Cookie: JSESSIONID=470B90ABB2F36D19EB1F42B00CAAA608
Response Headers
Response Body